<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">

<properties>

	<entry key="q01">
      <![CDATA[	 
    Framework: 
    
    Set up an API with Spring Boot framework and provide the following endpoints: 
    •	GET /question1/ --> returns Question 1's problem statement in text 
    •	GET /question2/ --> returns Question 2's problem statement in text 
    
    Question 1 - Finding the best plan: 
    Let’s say a cloud service offers different plans. For example, Microsoft Office 365 has different plans called E1, F1, etc. Each plan has different features such as voice, email, archiving, etc. Now let's say the user selects a set of features he/she wants. 
    
    The goal is to write code in Java that finds the combination of plans that offers all selected features at the lowest price. Note that in some cases, it will be just one plan, but in other cases you will need 2 or more plans to get all the features you want. 
    
    Provide an endpoint (e.g.: /question1/solution) that takes the two inputs (plans and features) in JSON format and returns the combination as described above. 
    
    Optionally (plus points), provide swagger-ui link along with postman tests. 
    
    Note: The cost for each plan is positive ( > 0). 
    
    A simple example: 
    
    The seller from corporation Joo provides the following plans and its price: 
    
    PLAN1: (voice, email), $100 per year 
    PLAN2: (email, database, admin), $150 per year 
    PLAN3: (voice, admin), $125 per year 
    PLAN4: (database, admin), $135 per year 
    
    The customer wants (email, voice, admin) service. 
    He has the following choices to cover his need: 
    
    (PLAN1, PLAN2): 100 + 150 = $250 
    (PLAN1, PLAN3): 100 + 125 = $225 
    (PLAN2, PLAN3): 150 + 125 = $270 
    (PLAN1, PLAN4): 100 + 135 = $235 
    (PLAN2, PLAN3, PLAN4) = 150 + 125 + 135 = $410 
    …// other possible plan choices omitted 
    
    And the minimum price is $225, PLAN1 + PLAN3.
    Try to optimize your algorithm / code. We may test with your code with some cases with 10+ features / plans. 
     	]]>
	</entry>


    <entry key="q02">
    <![CDATA[

    Question 2 - Linking nodes in a tree: 
    
    Each Node represents an element of a tree and specifies a list of immediate children. The 'Children' property lists all children (in order) but the 'Right' property is set to null. Suppose you are given the root of a fully populated tree (i.e. a Node instance called rootNode). Write code in Java to set the 'Right' property so that each node is linked to right siblings without using a queue or stack (do not use recursive calls). Make sure to test your code with the sample tree below.
    
    Provide an endpoint (e.g.: /question2/solution) that takes the input (rootNode) represented in JSON format and returns the modified tree. 
    
    Optionally (plus points), provide swagger-ui link along with postman tests. 
    
    To get you started:

      		     
     	]]>
    </entry>   
    
</properties>